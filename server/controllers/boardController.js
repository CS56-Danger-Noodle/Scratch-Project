const Board = require("../models/boardModel");
const mongoose = require('mongoose');

const boardController = {};

// this needs to be called, but it seems that we need a router for this particular post request
// /boards post is the endpoint Clark said
// this generates Id that can be grabbed by router
// don't need to worry about adding it to User, use another middleware for that function
boardController.createBoard = async (req, res, next) => {
  // since the schema requires these, this will be send through req body
  const { boardName } = req.body;
  // so i want to send board ID back as well, because I noticed that boards in DB has _id: ObjectId('6406897254f6667a95770854') for goblin shark
  // id of board is autogenerated, so I can just pass everything in so next router can use it
  try {
    const response = await Board.create({boardName, columns: []})
    res.locals.board = response;
    return next();
  } catch (e) {
    return next({
      log: "error in boardController.createBoard",
      message: { err: "boardController.createBoard" + err.message },
    });
  }
};

boardController.getBoards = (req, res, next) => {
  let { boardIds } = res.locals;

  Board.find({_id: {$in: boardIds}})   // [ 1, 2, 3]  _id: 1, _id:2, _id:3  [{board1},{board2}]
    .then(response => {
      res.locals.boards = response;
      return next();
    })
    .catch((err) => {
      return next({
        log: "error in boardController.getBoards",
        message: { err: "boardController.getBoards" + err },
      });
    });
};
boardController.getBoard = (req, res, next) => {
  const { board_id } = req.params;

  Board.findById(board_id).exec()
    .then(response => {
      console.log('response: ', response);
      res.locals.board = response;
      return next();
    })
    .catch((err) => {
      return next({
        log: "error in boardController.getBoard",
        message: { err: "boardController.getBoard" + err },
      });
    });
};


boardController.addColumn = (req, res, next) => {
  console.log('running boardController.addColumn');
  console.log('req.params: ', req.params);
  console.log('req.body: ', req.body);
  const { board_id } = req.params;
  const { columnName } = req.body;
  console.log('board_id: ', board_id, 'columnName: ', columnName );
  Board.findOneAndUpdate({_id : board_id}, 
    {$push: {columns: { columnName, cards: [] } }},
    {new: true}).exec()
      .then(data => {
        console.log('newBoard: ', data)
        res.locals.board = data;
        next()
      })
      .catch(err => {
        return next({
          log:"error in boardcontroller.addColumn",
          message: { err: "boardController.addColumn" + err},
        });
      });
}

boardController.removeColumn = (req, res, next) => {
  console.log('running boardController.removeColumn');
  // console.log('req.params: ', req.params);
  const { board_id, column_id } = req.params;
  console.log('board_id: ', board_id, 'column_id: ', column_id );
  Board.findByIdAndUpdate(board_id, {$pull: { columns: { _id: column_id } }}, {new: true}).exec()
    .then((data) => {
      console.log('updatedBoard: ', data)
      res.locals.board = data;
      next();
    })
    .catch((err) => {
      return next({
        log:"error in boardcontroller.addColumn",
        message: { err: "boardController.addColumn" + err},
      });
    });
}

// boardController.addCard = (req, res, next) => {
//   console.log('inside of boardController.addCard');
//   console.log('req.params: ' req.params);
//   console.log('req.body: ', req.body);
//   const { board_id, column_id } = req.params;
//   const { cardText } = req.body;
//   Board.findByIdAndUpdate(board_id, {column_id}, 
//     {$push: {cards : cards}},
//     {new: true}).exec()
//       .then(data => {
//         res.locals.board = data;
//         next()
//       })
//       .catch(err => {
//         return next({
//           log:"error in boardcontroller.addCard",
//           message: { err: "boardController.addCard" + err},
//         });
//       });
// }

module.exports = boardController;

/**
 * select *
 * from Board
 * where id in (1,2,3);
 * 
 */
