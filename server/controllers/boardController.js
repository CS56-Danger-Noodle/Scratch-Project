const Board = require("../models/boardModel");
const User = require("../models/userModel");

const boardController = {};

// this needs to be called, but it seems that we need a router for this particular post request
// /boards post is the endpoint Clark said
// this generates Id that can be grabbed by router
// don't need to worry about adding it to User, use another middleware for that function
boardController.createBoard = async (req, res, next) => {
  // since the schema requires these, this will be send through req body
  const { boardName } = req.body;
  // so i want to send board ID back as well, because I noticed that boards in DB has _id: ObjectId('6406897254f6667a95770854') for goblin shark
  // id of board is autogenerated, so I can just pass everything in so next router can use it
  try {
    const response = await Board.create({boardName, columns: []})
    res.locals.board = response;
    return next();
  } catch (e) {
    return next({
      log: "error in boardController.createBoard",
      message: { err: "boardController.createBoard" + err.message },
    });
  }
};

boardController.getBoards = async (req, res, next) => {
  const username = req.session.username;
  try {
    const user = await User.findOne({username});
    const boards = await Board.find({'_id': {$in: user.board_ids}});
    res.locals.boards = boards;
    return next();
  } catch (e) {
    return next({
      log: "error in boardController.getBoards",
      message: { err: "boardController.getBoards" + e },
    });
  }
};

boardController.getBoard = (req, res, next) => {
  const { board_id } = req.params;

  Board.findById(board_id).exec()
    .then(response => {
      console.log('response: ', response);
      res.locals.board = response;
      return next();
    })
    .catch((err) => {
      return next({
        log: "error in boardController.getBoard",
        message: { err: "boardController.getBoard" + err },
      });
    });
};
boardController.deleteBoard = async (req, res, next) => {
  const { board_id } = req.params;
  try {
    await Board.findOneAndDelete({_id: board_id});
    return next();
  } catch (e) {
    return next({
      log: "error in boardController.getBoard",
      message: { err: "boardController.getBoard" + err },
    });
  }
};

module.exports = boardController;

/**
 * select *
 * from Board
 * where id in (1,2,3);
 *
 */
